{
  "permissions": {
    "allow": [
      "Bash(for i in {1..5})",
      "Bash(do echo \"Request $i:\")",
      "Bash(done)",
      "Bash(docker exec:*)",
      "Bash(python3:*)",
      "Bash(chmod:*)",
      "Bash(./scripts/backup-database.sh:*)",
      "Bash(docker ps:*)",
      "Bash(sudo chmod:*)",
      "Bash(do echo \"Request $i:\" curl -s -X POST https://api.verdegris.eu/api/v1/auth/refresh -H \"Content-Type: application/json\" -d '{\"\"\"\"refresh_token\"\"\"\": \"\"\"\"invalid\"\"\"\"}' -w \"\\nStatus: %{http_code}\\n\")",
      "Bash(PGPASSWORD='fd9-kyLwTx' psql:*)",
      "Bash(PGPASSWORD='fd9-kyLwTx' psql -h localhost -p 5432 -U parking_user -d parking_v5 -c \"\\d user_tenants\")",
      "Bash(PGPASSWORD='fd9-kyLwTx' psql -h localhost -p 5432 -U parking_user -d parking_v5 -c \"\n-- Drop old constraint\nALTER TABLE user_memberships DROP CONSTRAINT IF EXISTS valid_role;\n\n-- Add new constraint with platform_admin\nALTER TABLE user_memberships ADD CONSTRAINT valid_role \nCHECK (role::text = ANY (ARRAY[\n    ''platform_admin''::character varying,\n    ''owner''::character varying,\n    ''admin''::character varying,\n    ''operator''::character varying,\n    ''viewer''::character varying\n]::text[]));\n\")"
    ],
    "deny": [],
    "ask": []
  }
}
