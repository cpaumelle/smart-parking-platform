# docker-compose.yml - Production-ready setup

services:
  # ============================================================
  # APPLICATION
  # ============================================================
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: parking-api
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      CHIRPSTACK_HOST: ${CHIRPSTACK_HOST}
      CHIRPSTACK_PORT: ${CHIRPSTACK_PORT}
      CHIRPSTACK_API_KEY: ${CHIRPSTACK_API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DEBUG: ${DEBUG:-false}
      CORS_ORIGINS: ${CORS_ORIGINS}
      SECRET_KEY: ${SECRET_KEY}
      APP_NAME: ${APP_NAME:-Smart Parking Platform v2}
      APP_VERSION: ${APP_VERSION:-2.0.0}
    expose:
      - "8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chirpstack:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 40s
    volumes:
      - ./src:/app/src  # Hot reload in development
    networks:
      - parking-network
    labels:
      - "traefik.enable=true"

      # Main API endpoint (new consolidated)
      - "traefik.http.routers.api.rule=Host(`api.${DOMAIN}`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=8000"

      # LEGACY COMPATIBILITY - Old ingest webhook domain
      - "traefik.http.routers.legacy-ingest.rule=Host(`parking-ingest.${DOMAIN}`)"
      - "traefik.http.routers.legacy-ingest.entrypoints=websecure"
      - "traefik.http.routers.legacy-ingest.tls=true"
      - "traefik.http.routers.legacy-ingest.tls.certresolver=letsencrypt"
      - "traefik.http.routers.legacy-ingest.service=api"
      - "traefik.http.routers.legacy-ingest.middlewares=rewrite-webhook@file"

      # LEGACY COMPATIBILITY - Old display service domain
      - "traefik.http.routers.legacy-display.rule=Host(`parking-display.${DOMAIN}`)"
      - "traefik.http.routers.legacy-display.entrypoints=websecure"
      - "traefik.http.routers.legacy-display.tls=true"
      - "traefik.http.routers.legacy-display.tls.certresolver=letsencrypt"
      - "traefik.http.routers.legacy-display.service=api"

      # LEGACY COMPATIBILITY - Old API domain redirect
      - "traefik.http.routers.legacy-api.rule=Host(`parking-api.${DOMAIN}`)"
      - "traefik.http.routers.legacy-api.entrypoints=websecure"
      - "traefik.http.routers.legacy-api.tls=true"
      - "traefik.http.routers.legacy-api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.legacy-api.service=api"

  # ============================================================
  # DATABASE
  # ============================================================
  postgres:
    image: postgres:16-alpine
    container_name: parking-postgres
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 512M
    environment:
      POSTGRES_USER: parking
      POSTGRES_PASSWORD: ${DB_PASSWORD:-parking}
      POSTGRES_DB: parking
      POSTGRES_INITDB_ARGS: "--data-checksums"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations/001_initial_schema.sql:/docker-entrypoint-initdb.d/001_schema.sql:ro
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U parking -d parking"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - parking-network

  # ============================================================
  # CACHE
  # ============================================================
  redis:
    image: redis:7-alpine
    container_name: parking-redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - parking-network

  # ============================================================
  # LORAWAN NETWORK SERVER
  # ============================================================
  chirpstack:
    image: chirpstack/chirpstack:4
    container_name: parking-chirpstack
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    command: -c /etc/chirpstack
    environment:
      POSTGRESQL_DSN: postgresql://parking:${DB_PASSWORD:-parking}@postgres:5432/chirpstack?sslmode=disable
    volumes:
      - ./config/chirpstack:/etc/chirpstack:ro
      - chirpstack_data:/var/lib/chirpstack
    expose:
      - "8080"  # Web UI & API
    depends_on:
      postgres:
        condition: service_healthy
      mosquitto:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - parking-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.chirpstack.rule=Host(`chirpstack.${DOMAIN}`)"
      - "traefik.http.routers.chirpstack.entrypoints=websecure"
      - "traefik.http.routers.chirpstack.tls=true"
      - "traefik.http.routers.chirpstack.tls.certresolver=letsencrypt"
      - "traefik.http.services.chirpstack.loadbalancer.server.port=8080"

  mosquitto:
    image: eclipse-mosquitto:2
    container_name: parking-mosquitto
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    volumes:
      - ./config/mosquitto:/mosquitto/config
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    ports:
      - "1883:1883"
      - "9001:9001"  # WebSocket
    healthcheck:
      test: ["CMD-SHELL", "timeout 3 nc -z localhost 1883 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - parking-network

  # ============================================================
  # DATABASE ADMIN TOOL
  # ============================================================
  adminer:
    build: ./config/adminer-custom
    container_name: parking-adminer
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    networks:
      - parking-network
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "php", "-r", "if(fsockopen('localhost',8080)){exit(0);}else{exit(1);}"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adminer.rule=Host(`adminer.${DOMAIN}`)"
      - "traefik.http.routers.adminer.entrypoints=websecure"
      - "traefik.http.routers.adminer.tls=true"
      - "traefik.http.routers.adminer.tls.certresolver=letsencrypt"
      - "traefik.http.routers.adminer.middlewares=admin-auth@file"
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"

  # ============================================================
  # GATEWAY BRIDGE (Converts UDP to MQTT)
  # ============================================================
  gateway-bridge:
    image: chirpstack/chirpstack-gateway-bridge:4
    container_name: parking-gateway-bridge
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 64M
        reservations:
          cpus: '0.1'
          memory: 32M
    ports:
      - "1700:1700/udp"  # Semtech UDP
      - "3001:3001"      # Basic Station
    volumes:
      - ./config/chirpstack-gateway-bridge:/etc/chirpstack-gateway-bridge:ro
    networks:
      - parking-network
    depends_on:
      mosquitto:
        condition: service_started

  # ============================================================
  # REVERSE PROXY (Production)
  # ============================================================
  traefik:
    image: traefik:v3.1
    container_name: parking-traefik
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    command:
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=parking-v2_parking-network
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=${TLS_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --log.level=INFO
      - --providers.docker.watch=true
      - --providers.file.filename=/config/dynamic.yml
      - --ping=true
    ports:
      - "80:80"
      - "443:443"
      - "8090:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/letsencrypt
      - ./config/traefik:/config:ro
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - parking-network
    labels:
      - "traefik.enable=true"
      # Traefik dashboard
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.middlewares=admin-auth@file"

  # ============================================================
  # FRONTEND SERVICES
  # ============================================================
  website:
    build: /opt/www-verdegris
    container_name: parking-website
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - parking-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.website-www.rule=Host(`www.${DOMAIN}`)"
      - "traefik.http.routers.website-www.entrypoints=websecure"
      - "traefik.http.routers.website-www.tls=true"
      - "traefik.http.routers.website-www.tls.certresolver=letsencrypt"
      - "traefik.http.routers.website-root.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.website-root.entrypoints=websecure"
      - "traefik.http.routers.website-root.tls=true"
      - "traefik.http.routers.website-root.tls.certresolver=letsencrypt"
      - "traefik.http.services.website.loadbalancer.server.port=80"

  contact-api:
    build: /opt/www-verdegris/contact-api
    container_name: parking-contact-api
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    environment:
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      TO_EMAIL: contact@eroundit.eu
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - parking-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.contact-api.rule=Host(`contact.${DOMAIN}`)"
      - "traefik.http.routers.contact-api.entrypoints=websecure"
      - "traefik.http.routers.contact-api.tls=true"
      - "traefik.http.routers.contact-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.contact-api.loadbalancer.server.port=8001"

  device-manager-ui:
    build: ./frontend/device-manager
    container_name: parking-device-manager
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    networks:
      - parking-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.devices.rule=Host(`devices.${DOMAIN}`)"
      - "traefik.http.routers.devices.entrypoints=websecure"
      - "traefik.http.routers.devices.tls=true"
      - "traefik.http.routers.devices.tls.certresolver=letsencrypt"
      - "traefik.http.services.devices.loadbalancer.server.port=80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/healthz"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  kuando-ui:
    image: nginx:alpine
    container_name: parking-kuando-ui
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 64M
        reservations:
          cpus: '0.1'
          memory: 32M
    volumes:
      - ./services/kuando-ui/index.html:/usr/share/nginx/html/index.html:ro
      - ./services/kuando-ui/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - parking-network
    depends_on:
      - api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kuando.rule=Host(`kuando.${DOMAIN}`)"
      - "traefik.http.routers.kuando.entrypoints=websecure"
      - "traefik.http.routers.kuando.tls=true"
      - "traefik.http.routers.kuando.tls.certresolver=letsencrypt"
      - "traefik.http.services.kuando.loadbalancer.server.port=80"

  # ============================================================
  # FILE BROWSER
  # ============================================================
  filebrowser:
    image: filebrowser/filebrowser:latest
    container_name: parking-filebrowser
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    volumes:
      - /opt/v5-smart-parking:/srv
      - filebrowser_db:/database
    environment:
      - FB_DATABASE=/database/filebrowser.db
      - FB_ROOT=/srv
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - parking-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.filebrowser.rule=Host(`files.${DOMAIN}`)"
      - "traefik.http.routers.filebrowser.entrypoints=websecure"
      - "traefik.http.routers.filebrowser.tls=true"
      - "traefik.http.routers.filebrowser.tls.certresolver=letsencrypt"
      - "traefik.http.services.filebrowser.loadbalancer.server.port=80"

networks:
  parking-network:
    driver: bridge

volumes:
  postgres_data:
    external: true
    name: smart-parking_postgres_data
  redis_data:
    external: true
    name: smart-parking_redis_data
  chirpstack_data:
    external: true
    name: smart-parking_chirpstack_data
  mosquitto_data:
    external: true
    name: smart-parking_mosquitto_data
  mosquitto_logs:
    external: true
    name: smart-parking_mosquitto_logs
  filebrowser_db:
    external: true
    name: smart-parking_filebrowser_db
