import VersionInfo from "../components/common/VersionInfo.jsx";
/*
 * SenseMy IoT Platform - Analytics Dashboard
 * Version: 2.1.0 - Build Version Display
 * Created: 2025-08-11 17:30:00 UTC
 * Author: SenseMy IoT Development Team
 * 
 * Changelog:
 * - Added build version display in header
 * - Shows build number and timestamp for version verification
 * - Complete responsive design with version tracking
 */

import React from 'react';
import {
  BarChart3,
  Users,
  Activity,
  AlertCircle,
  CheckCircle,
  RefreshCw,
  TrendingUp,
  TrendingDown,
  Clock,
  Wifi,
  WifiOff,
  GitCommit
} from 'lucide-react';
import { useAnalytics } from '../hooks/useAnalytics.js';
import { useVersion } from '../hooks/useVersion.js';

// Get metric icon helper function
const getMetricIcon = (metric) => {
  const icons = {
    temperature: Thermometer,
    humidity: Droplets,
    co2: Wind
  };
  return icons[metric] || Thermometer;
};


const Analytics = () => {
  const {
    occupancyData,
    deviceStatus,
    serviceHealth,
    statistics,
    loading,
    isLoading,
    error,
    lastUpdated,
    refreshAll
  } = useAnalytics();

  const { version, loading: versionLoading } = useVersion();

  const getServiceStatusIcon = () => {
    if (loading.health) return <RefreshCw className="w-4 h-4 animate-spin text-gray-400" />;
    if (serviceHealth?.status === 'healthy') return <CheckCircle className="w-4 h-4 text-green-500" />;
    return <AlertCircle className="w-4 h-4 text-red-500" />;
  };

  const getLastUpdatedText = () => {
    if (!lastUpdated) return 'Never';
    const now = new Date();
    const diff = Math.floor((now - lastUpdated) / 1000);
    if (diff < 60) return `${diff}s ago`;
    if (diff < 3600) return `${Math.floor(diff / 60)}m ago`;
    return `${Math.floor(diff / 3600)}h ago`;
  };

  return (
    <div className="page-container content-spacing">
      {/* Header with Build Version */}
      <div className="page-header">
        <div>
          <h1 className="page-title">Analytics Dashboard</h1>
          <p className="descriptive-text">Real-time occupancy and sensor monitoring</p>
          <VersionInfo showFull={true} className="mt-2" />
          {/* Build Version Info */}
          {version && !versionLoading && (
            <div className="flex items-center space-x-4 mt-2 text-xs text-gray-500">
              <div className="flex items-center space-x-1">
                <GitCommit className="w-3 h-3" />
                <span>Build: {version.buildNumber}</span>
              </div>
              <div className="flex items-center space-x-1">
                <Clock className="w-3 h-3" />
                <span>{version.buildTimestamp}</span>
              </div>
              <div className="hidden sm:block">
                <span>v{version.version}.{version.build}</span>
              </div>
            </div>
          )}
        </div>
        <div className="flex flex-col space-y-3 sm:flex-row sm:items-center sm:space-y-0 sm:space-x-4">
          <div className="flex items-center space-x-2 text-sm text-gray-600">
            {getServiceStatusIcon()}
            <span>Analytics Service</span>
          </div>
          <button
            onClick={refreshAll}
            disabled={isLoading}
            className="btn-primary flex items-center justify-center space-x-2"
          >
            <RefreshCw className={`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`} />
            <span>Refresh</span>
          </button>
        </div>
      </div>

      {/* Error Display */}
      {error && (
        <div className="responsive-card bg-red-50 border-red-200 fade-in">
          <div className="flex items-start space-x-3">
            <AlertCircle className="w-5 h-5 text-red-400 flex-shrink-0 mt-0.5" />
            <div>
              <h3 className="text-sm font-medium text-red-800">Error Loading Analytics</h3>
              <p className="text-sm text-red-700 mt-1">
                {error.userMessage || error.message || 'An error occurred while loading analytics data'}
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Statistics Cards */}
      <div className="analytics-stats-grid">
        <div className="stat-card fade-in">
          <div className="flex items-center justify-between w-full lg:flex-col lg:items-start">
            <div>
              <p className="text-sm font-medium text-gray-600">Total Occupancy</p>
              <p className="stat-number text-blue-600">{statistics.totalOccupancy}</p>
            </div>
            <Users className="w-8 h-8 text-blue-400 flex-shrink-0" />
          </div>
        </div>

        <div className="stat-card fade-in">
          <div className="flex items-center justify-between w-full lg:flex-col lg:items-start">
            <div>
              <p className="text-sm font-medium text-gray-600">Active Sensors</p>
              <p className="stat-number text-green-600">
                {statistics.activeDevices}/{statistics.totalDevices}
              </p>
            </div>
            <Activity className="w-8 h-8 text-green-400 flex-shrink-0" />
          </div>
        </div>

        <div className="stat-card fade-in">
          <div className="flex items-center justify-between w-full lg:flex-col lg:items-start">
            <div>
              <p className="text-sm font-medium text-gray-600">People In</p>
              <p className="stat-number text-green-600">{statistics.totalTrafficIn}</p>
            </div>
            <TrendingUp className="w-8 h-8 text-green-400 flex-shrink-0" />
          </div>
        </div>

        <div className="stat-card fade-in">
          <div className="flex items-center justify-between w-full lg:flex-col lg:items-start">
            <div>
              <p className="text-sm font-medium text-gray-600">People Out</p>
              <p className="stat-number text-orange-600">{statistics.totalTrafficOut}</p>
            </div>
            <TrendingDown className="w-8 h-8 text-orange-400 flex-shrink-0" />
          </div>
        </div>
      </div>

      {/* Device Status Grid */}
      <div className="responsive-card fade-in">
        <div className="flex items-center justify-between border-b border-gray-200 pb-4 mb-6">
          <h2 className="section-title">Device Status</h2>
          <div className="flex items-center space-x-2 text-sm text-gray-600">
            <Clock className="w-4 h-4" />
            <span>Updated {getLastUpdatedText()}</span>
          </div>
        </div>

        {deviceStatus.length > 0 ? (
          <div className="device-grid">
            {deviceStatus.map((device) => (
              <div
                key={device.deveui}
                className={`device-card gpu-accelerated ${
                  device.isActive
                    ? 'border-green-200 bg-green-50'
                    : 'border-gray-200 bg-gray-50'
                }`}
              >
                <div className="flex items-start justify-between mb-4">
                  <div className="flex-1">
                    <h3 className="font-medium text-gray-900 mb-1">
                      Device {device.deveui.slice(-6)}
                    </h3>
                    <code className="text-xs text-gray-500 bg-white px-2 py-1 rounded font-mono">
                      {device.deveui}
                    </code>
                  </div>
                  {device.isActive ? (
                    <Wifi className="w-5 h-5 text-green-500 flex-shrink-0" />
                  ) : (
                    <WifiOff className="w-5 h-5 text-gray-400 flex-shrink-0" />
                  )}
                </div>

                <div className="space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="descriptive-text">Current Occupancy:</span>
                    <span className={`font-bold ${device.currentOccupancy > 0 ? 'text-blue-600' : 'text-gray-400'}`}>
                      {device.currentOccupancy} people
                    </span>
                  </div>

                  <div className="flex justify-between items-center">
                    <span className="descriptive-text">Recent Traffic:</span>
                    <div className="text-sm">
                      <span className="text-green-600 font-medium">↑{device.recentTraffic.in}</span>
                      <span className="mx-2 text-gray-400">/</span>
                      <span className="text-orange-600 font-medium">↓{device.recentTraffic.out}</span>
                    </div>
                  </div>

                  <div className="flex justify-between items-center">
                    <span className="descriptive-text">Status:</span>
                    <span className={`text-sm font-medium ${
                      device.isActive ? 'text-green-600' : 'text-gray-500'
                    }`}>
                      {device.isActive ? 'Active' : 'Inactive'}
                    </span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="text-center py-12">
            <BarChart3 className="mx-auto h-12 w-12 text-gray-400 mb-4" />
            <h3 className="section-title text-gray-900 mb-2">No Analytics Data</h3>
            <p className="descriptive-text max-w-md mx-auto">
              {isLoading ? 'Loading device status...' : 'No devices found with analytics data.'}
            </p>
          </div>
        )}
      </div>

      {/* Recent Occupancy Data Table */}
      {occupancyData.length > 0 && (
        <div className="responsive-card fade-in">
          <div className="border-b border-gray-200 pb-4 mb-6">
            <h2 className="section-title">Recent Occupancy Data</h2>
          </div>
          
          <div className="table-responsive">
            <table className="table-styled">
              <thead className="table-header">
                <tr>
                  <th>Device</th>
                  <th>Time</th>
                  <th className="hidden sm:table-cell">People In</th>
                  <th className="hidden sm:table-cell">People Out</th>
                  <th>Occupancy</th>
                </tr>
              </thead>
              <tbody className="table-body">
                {occupancyData.slice(0, 10).map((record, index) => (
                  <tr key={`${record.deveui}-${record.hour_bucket}-${index}`} className="hover:bg-gray-50">
                    <td>
                      <div className="font-medium text-gray-900">
                        {record.deveui.slice(-6)}
                      </div>
                      <div className="sm:hidden text-xs text-gray-500 mt-1">
                        In: {record.sum_in || 0} / Out: {record.sum_out || 0}
                      </div>
                    </td>
                    <td className="descriptive-text">
                      <div className="hidden sm:block">
                        {new Date(record.hour_bucket).toLocaleString()}
                      </div>
                      <div className="sm:hidden">
                        {new Date(record.hour_bucket).toLocaleDateString()}
                        <br />
                        {new Date(record.hour_bucket).toLocaleTimeString()}
                      </div>
                    </td>
                    <td className="hidden sm:table-cell text-green-600 font-medium">
                      {record.sum_in || 0}
                    </td>
                    <td className="hidden sm:table-cell text-orange-600 font-medium">
                      {record.sum_out || 0}
                    </td>
                    <td>
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                        parseInt(record.occupancy) > 0
                          ? 'bg-blue-100 text-blue-800'
                          : 'bg-gray-100 text-gray-800'
                      }`}>
                        {record.occupancy} people
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}
    </div>
  );
};

export default Analytics;