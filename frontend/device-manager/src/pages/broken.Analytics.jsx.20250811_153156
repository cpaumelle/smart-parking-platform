// src/pages/Analytics.jsx
// Version: 3.0.0 - Environmental Analytics Dashboard
// Created: 2025-08-12 00:08:00 UTC
// Complete pivot from occupancy to environmental analytics
// Metric-first navigation with Recharts integration

import React, { useState, useEffect } from 'react';
import {
 BarChart3,
 Thermometer,
 Droplets,
 Wind,
 RefreshCw,
 AlertCircle,
 CheckCircle,
 Clock,
 TrendingUp,
 Settings
} from 'lucide-react';

// Import our new environmental components
import MetricSelector from '../components/environmental/MetricSelector.jsx';
import EnvironmentalDashboard from '../components/environmental/EnvironmentalDashboard.jsx';
import EnvironmentalTrends from '../components/environmental/EnvironmentalTrends.jsx';
import VersionInfo from "../components/common/VersionInfo.jsx";

// Import our new environmental hook
import { useEnvironmental } from '../hooks/useEnvironmental.js';
import { useVersion } from '../hooks/useVersion.js';

  // Get metric icon helper function
    return icons[metric] || Thermometer;
  };
const Analytics = () => {

  // Get metric icon helper function
  const getMetricIcon = (metric) => {
    const icons = {
      temperature: Thermometer,
      humidity: Droplets,
      co2: Wind
    };
    return icons[metric] || Thermometer;
  };

  // Get metric icon helper function
    return icons[metric] || Thermometer;
  };

 // State for metric selection and filters
 const [selectedMetric, setSelectedMetric] = useState('temperature');
 const [selectedDevices, setSelectedDevices] = useState([]);
 const [timeRange, setTimeRange] = useState(24); // hours
 const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);

 // Environmental data hook
 const {
   sensorCapabilities,
   environmentalLatest,
   environmentalHourly,
   deviceHealth,
   deviceTypes,
   processedLatestReadings,
   compatibleDevices,
   metricAvailability,
   chartData,
   loading,
   isLoading,
   error,
   lastUpdated,
   hasData,
   refreshAll,
   refreshMetric,
   fetchMetricData,
   checkASHRAECompliance
 } = useEnvironmental({
   selectedMetric,
   selectedDevices,
   hours: timeRange,
   autoRefresh: false, // Manual refresh only
   refreshInterval: 60000
 });

 // Version info
 const { version, loading: versionLoading } = useVersion();

 // Handle metric selection change
 const handleMetricChange = (newMetric) => {
   setSelectedMetric(newMetric);
   setSelectedDevices([]); // Reset device selection when metric changes
 };

 // Handle device selection for comparison
 const handleDeviceSelection = (deviceEui, selected) => {
   if (selected) {
     setSelectedDevices(prev => [...prev, deviceEui]);
   } else {
     setSelectedDevices(prev => prev.filter(d => d !== deviceEui));
   }
 };

 // Handle time range change
 const handleTimeRangeChange = (hours) => {
   setTimeRange(hours);
 };

 // Get service status icon
 const getServiceStatusIcon = () => {
   if (loading.capabilities) return <RefreshCw className="w-4 h-4 animate-spin text-gray-400" />;
   if (sensorCapabilities) return <CheckCircle className="w-4 h-4 text-green-500" />;
   return <AlertCircle className="w-4 h-4 text-red-500" />;
 };

 // Get last updated text
 const getLastUpdatedText = () => {
   if (!lastUpdated) return 'Never';
   const now = new Date();
   const diff = Math.floor((now - lastUpdated) / 1000);
   if (diff < 60) return `${diff}s ago`;
   if (diff < 3600) return `${Math.floor(diff / 60)}m ago`;
   return `${Math.floor(diff / 3600)}h ago`;
 };

 // Get current metric info
 const getCurrentMetricInfo = () => {
   if (!metricAvailability[selectedMetric]) return null;
   
   const availability = metricAvailability[selectedMetric];
   const config = {
     temperature: { icon: Thermometer, label: 'Temperature', emoji: 'üå°Ô∏è', unit: '¬∞C' },
     humidity: { icon: Droplets, label: 'Humidity', emoji: 'üíß', unit: '%' },
     co2: { icon: Wind, label: 'CO2', emoji: 'ü´Å', unit: 'ppm' }
   };

   return {
     ...config[selectedMetric],
     ...availability
   };
 };

 const currentMetricInfo = getCurrentMetricInfo();

 return (
   <div className="page-container content-spacing">
     {/* Header */}
     <div className="page-header">
       <div>
         <h1 className="page-title">Environmental Analytics Dashboard</h1>
         <p className="descriptive-text">Real-time environmental monitoring with ASHRAE compliance</p>
         <VersionInfo showFull={true} className="mt-2" />
         
         {/* Build Version Info */}
         {version && !versionLoading && (
           <div className="flex items-center space-x-4 mt-2 text-xs text-gray-500">
             <div className="flex items-center space-x-1">
               <BarChart3 className="w-3 h-3" />
               <span>Environmental Analytics v3.0.0</span>
             </div>
             <div className="flex items-center space-x-1">
               <Clock className="w-3 h-3" />
               <span>Build: {version.buildTimestamp}</span>
             </div>
           </div>
         )}
       </div>
       
       {/* Header Controls */}
       <div className="flex flex-col space-y-3 sm:flex-row sm:items-center sm:space-y-0 sm:space-x-4">
         <div className="flex items-center space-x-2 text-sm text-gray-600">
           {getServiceStatusIcon()}
           <span>Analytics Service</span>
           <span className="text-gray-400">‚Ä¢</span>
           <span>Updated {getLastUpdatedText()}</span>
         </div>
         <button
           onClick={refreshAll}
           disabled={isLoading}
           className="btn-primary flex items-center justify-center space-x-2"
         >
           <RefreshCw className={`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`} />
           <span>Refresh</span>
         </button>
       </div>
     </div>

     {/* Metric Selection Bar */}
     <div className="bg-white border border-gray-200 rounded-lg p-4 mb-6">
       <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0">
         {/* Metric Selector */}
         <div className="flex-1 max-w-xs">
           <MetricSelector
             selectedMetric={selectedMetric}
             onMetricChange={handleMetricChange}
             metricAvailability={metricAvailability}
             sensorCapabilities={sensorCapabilities}
             disabled={loading.capabilities}
             showCounts={true}
             showIcons={true}
           />
         </div>

         {/* Time Range Selector */}
         <div className="flex items-center space-x-4">
           <label className="text-sm font-medium text-gray-700">üìà Time Range:</label>
           <select
             value={timeRange}
             onChange={(e) => handleTimeRangeChange(parseInt(e.target.value))}
             className="px-3 py-1 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
           >
             <option value={6}>Last 6 hours</option>
             <option value={12}>Last 12 hours</option>
             <option value={24}>Last 24 hours</option>
             <option value={48}>Last 48 hours</option>
             <option value={168}>Last week</option>
           </select>
         </div>

         {/* Advanced Filters Toggle */}
         <button
           onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}
           className="flex items-center space-x-2 px-3 py-1 text-sm text-gray-600 hover:text-gray-900 border border-gray-300 rounded-md hover:bg-gray-50"
         >
           <Settings className="w-4 h-4" />
           <span>Filters</span>
         </button>
       </div>

       {/* Advanced Filters Panel */}
       {showAdvancedFilters && (
         <div className="mt-4 pt-4 border-t border-gray-200">
           <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
             {/* Device Type Filter */}
             <div>
               <label className="block text-sm font-medium text-gray-700 mb-1">Device Types</label>
               <div className="space-y-1">
                 {compatibleDevices.map(deviceType => (
                   <label key={deviceType.device_type_id} className="flex items-center">
                     <input 
                       type="checkbox" 
                       className="mr-2" 
                       defaultChecked={true}
                     />
                     <span className="text-sm">{deviceType.device_type} ({deviceType.device_count})</span>
                   </label>
                 ))}
               </div>
             </div>

             {/* ASHRAE Compliance Filter */}
             <div>
               <label className="block text-sm font-medium text-gray-700 mb-1">ASHRAE Compliance</label>
               <div className="space-y-1">
                 <label className="flex items-center">
                   <input type="checkbox" className="mr-2" defaultChecked={true} />
                   <span className="text-sm text-green-600">‚úì Compliant</span>
                 </label>
                 <label className="flex items-center">
                   <input type="checkbox" className="mr-2" defaultChecked={true} />
                   <span className="text-sm text-red-600">‚úó Non-compliant</span>
                 </label>
               </div>
             </div>

             {/* Health Status Filter */}
             <div>
               <label className="block text-sm font-medium text-gray-700 mb-1">Device Health</label>
               <div className="space-y-1">
                 <label className="flex items-center">
                   <input type="checkbox" className="mr-2" defaultChecked={true} />
                   <span className="text-sm text-green-600">Healthy</span>
                 </label>
                 <label className="flex items-center">
                   <input type="checkbox" className="mr-2" defaultChecked={true} />
                   <span className="text-sm text-yellow-600">Warning</span>
                 </label>
                 <label className="flex items-center">
                   <input type="checkbox" className="mr-2" defaultChecked={true} />
                   <span className="text-sm text-red-600">Critical</span>
                 </label>
               </div>
             </div>
           </div>
         </div>
       )}
     </div>

     {/* Current Metric Summary */}
     {currentMetricInfo && (
       <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-4 mb-6">
         <div className="flex items-center justify-between">
           <div className="flex items-center">
             {React.createElement(currentMetricInfo.icon, { 
               className: 'w-6 h-6 text-blue-600 mr-3' 
             })}
             <div>
               <h3 className="text-lg font-semibold text-gray-900">
                 {currentMetricInfo.emoji} {currentMetricInfo.label} Analytics
               </h3>
               <p className="text-sm text-gray-600">
                 {currentMetricInfo.count} sensors active ‚Ä¢ {currentMetricInfo.percentage.toFixed(1)}% coverage
               </p>
             </div>
           </div>
           <div className="text-right">
             <div className="text-2xl font-bold text-blue-600">{currentMetricInfo.count}</div>
             <div className="text-xs text-gray-600">sensors</div>
           </div>
         </div>
       </div>
     )}

     {/* Error State */}
     {error && (
       <div className="bg-red-50 border border-red-200 rounded-md p-4 mb-6">
         <div className="flex items-center">
           <AlertCircle className="h-5 w-5 text-red-600 mr-2" />
           <span className="text-red-800 font-medium">Unable to load environmental data</span>
         </div>
         <p className="text-red-700 text-sm mt-1">{error.message}</p>
         <button
           onClick={refreshAll}
           className="mt-2 px-3 py-1 bg-red-600 text-white text-sm rounded hover:bg-red-700"
         >
           Retry
         </button>
       </div>
     )}

     {/* Main Content Grid */}
     <div className="grid grid-cols-1 xl:grid-cols-3 gap-6">
       {/* Environmental Trends Chart - Full Width on Large Screens */}
       <div className="xl:col-span-2">
         <EnvironmentalTrends
           chartData={chartData}
           selectedMetric={selectedMetric}
           selectedDevices={selectedDevices}
           hours={timeRange}
           loading={loading.hourly}
           error={error}
           sensorCapabilities={sensorCapabilities}
           className="h-full"
         />
       </div>

       {/* Summary Statistics */}
       <div className="space-y-6">
         {/* Metric Summary Cards */}
         {sensorCapabilities && (
           <div className="bg-white border border-gray-200 rounded-lg p-4">
             <h4 className="font-semibold text-gray-900 mb-3">Sensor Overview</h4>
             <div className="space-y-3">
               {Object.entries(metricAvailability).map(([metric, availability]) => {
                 const config = {
                   temperature: { icon: Thermometer, color: 'text-orange-600', bg: 'bg-orange-50' },
                   humidity: { icon: Droplets, color: 'text-blue-600', bg: 'bg-blue-50' },
                   co2: { icon: Wind, color: 'text-green-600', bg: 'bg-green-50' }
                 };
                 
                 const metricConfig = config[metric];
                 
                 return (
                   <div key={metric} className={`p-3 rounded-lg ${metricConfig.bg}`}>
                     <div className="flex items-center justify-between">
                       <div className="flex items-center">
                         {React.createElement(metricConfig.icon, { 
                           className: `w-4 h-4 ${metricConfig.color} mr-2` 
                         })}
                         <span className="text-sm font-medium capitalize">{metric}</span>
                       </div>
                       <div className="text-right">
                         <div className={`text-lg font-bold ${metricConfig.color}`}>
                           {availability.count}
                         </div>
                         <div className="text-xs text-gray-600">
                           {availability.percentage.toFixed(1)}%
                         </div>
                       </div>
                     </div>
                   </div>
                 );
               })}
             </div>
           </div>
         )}

         {/* Quick Stats */}
         <div className="bg-white border border-gray-200 rounded-lg p-4">
           <h4 className="font-semibold text-gray-900 mb-3">Quick Stats</h4>
           <div className="space-y-2 text-sm">
             <div className="flex justify-between">
               <span className="text-gray-600">Total Devices:</span>
               <span className="font-medium">{environmentalLatest.length}</span>
             </div>
             <div className="flex justify-between">
               <span className="text-gray-600">Active Sensors:</span>
               <span className="font-medium text-green-600">
                 {environmentalLatest.filter(d => d.status?.environmental_status === 'ok').length}
               </span>
             </div>
             <div className="flex justify-between">
               <span className="text-gray-600">Data Points ({timeRange}h):</span>
               <span className="font-medium">{chartData.length}</span>
             </div>
             <div className="flex justify-between">
               <span className="text-gray-600">Last Update:</span>
               <span className="font-medium">{getLastUpdatedText()}</span>
             </div>
           </div>
         </div>
       </div>
     </div>

     {/* Real-time Environmental Dashboard */}
     <div className="mt-6">
       <EnvironmentalDashboard
         environmentalData={processedLatestReadings}
         deviceHealth={deviceHealth}
         selectedMetric={selectedMetric}
         loading={loading.latest}
         error={error}
         lastUpdated={lastUpdated}
         onRefresh={refreshMetric}
       />
     </div>

     {/* Footer Info */}
     <div className="mt-8 pt-6 border-t border-gray-200 text-center text-sm text-gray-500">
       <p>
         Environmental analytics powered by {sensorCapabilities?.total_environmental_sensors || 14} sensors
         ‚Ä¢ ASHRAE standards compliance monitoring
         ‚Ä¢ Real-time data with {timeRange}-hour historical trends
       </p>
     </div>
   </div>
 );
};

export default Analytics;
