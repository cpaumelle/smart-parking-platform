// src/pages/ParkingSpaces.jsx
import { useState } from 'react';
import { useSpaces } from '../hooks/useSpaces.js';
import SpaceFormModal from '../components/parking-spaces/SpaceFormModal.jsx';

const ParkingSpaces = () => {
  const { spaces, loading, error, filters, setFilters, fetchSpaces, createSpace, updateSpace, archiveSpace } = useSpaces();
  const [showModal, setShowModal] = useState(false);
  const [editingSpace, setEditingSpace] = useState(null);

  const updateFilters = (newFilters) => {
    setFilters(prev => ({ ...prev, ...newFilters }));
  };

  const getStateBadgeColor = (state) => {
    switch(state?.toLowerCase()) {
      case 'free':
      case 'available': return 'bg-green-100 text-green-800';
      case 'occupied': return 'bg-red-100 text-red-800';
      case 'reserved': return 'bg-yellow-100 text-yellow-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const handleCreate = () => {
    setEditingSpace(null);
    setShowModal(true);
  };

  const handleEdit = (space) => {
    setEditingSpace(space);
    setShowModal(true);
  };

  const handleSave = async (formData) => {
    if (editingSpace) {
      await updateSpace(editingSpace.space_id, formData);
    } else {
      await createSpace(formData);
    }
  };

  const handleArchive = async (space) => {
    if (confirm(`Archive "${space.space_name}"?\n\nThis will disable the space and remove it from the active list.`)) {
      await archiveSpace(space.space_id);
    }
  };

  if (error) {
    return (
      <div className="p-8">
        <div className="bg-red-50 border border-red-200 rounded-md p-4">
          <div className="flex">
            <div className="text-red-400">‚ö†Ô∏è</div>
            <div className="ml-3">
              <h3 className="text-sm font-medium text-red-800">Error loading parking spaces</h3>
              <div className="mt-2 text-sm text-red-700">{error}</div>
              <button onClick={fetchSpaces} className="mt-4 bg-red-600 text-white px-3 py-2 rounded-md text-sm hover:bg-red-700">
                Try Again
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="p-4 lg:p-6 xl:p-8 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Parking Spaces</h1>
          <p className="mt-1 text-sm text-gray-600">Manage parking space assignments and monitor occupancy</p>
        </div>
        <div className="flex space-x-2">
          <button onClick={fetchSpaces} disabled={loading} className="bg-gray-100 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-200 disabled:opacity-50">
            {loading ? 'Refreshing...' : 'üîÑ Refresh'}
          </button>
          <button onClick={handleCreate} className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700">
            + Create Space
          </button>
        </div>
      </div>

      {/* Summary Cards */}
      <div className="grid grid-cols-2 gap-4 md:grid-cols-4">
        <div className="bg-white p-4 rounded-lg border">
          <div className="text-2xl font-bold text-gray-900">{spaces.length}</div>
          <div className="text-sm text-gray-600">Total Spaces</div>
        </div>
        <div className="bg-white p-4 rounded-lg border">
          <div className="text-2xl font-bold text-green-600">
            {spaces.filter(s => ['FREE', 'available'].includes(s.current_state)).length}
          </div>
          <div className="text-sm text-gray-600">Available</div>
        </div>
        <div className="bg-white p-4 rounded-lg border">
          <div className="text-2xl font-bold text-red-600">
            {spaces.filter(s => s.current_state === 'occupied').length}
          </div>
          <div className="text-sm text-gray-600">Occupied</div>
        </div>
        <div className="bg-white p-4 rounded-lg border">
          <div className="text-2xl font-bold text-yellow-600">
            {spaces.filter(s => s.current_state === 'reserved').length}
          </div>
          <div className="text-sm text-gray-600">Reserved</div>
        </div>
      </div>

      {/* Filters */}
      <div className="bg-white p-4 rounded-lg border space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Building</label>
            <input type="text" placeholder="Filter by building..." value={filters.building || ''} onChange={(e) => updateFilters({ building: e.target.value })} className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm" />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Floor</label>
            <input type="text" placeholder="Filter by floor..." value={filters.floor || ''} onChange={(e) => updateFilters({ floor: e.target.value })} className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm" />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Zone</label>
            <input type="text" placeholder="Filter by zone..." value={filters.zone || ''} onChange={(e) => updateFilters({ zone: e.target.value })} className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm" />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Search</label>
            <input type="text" placeholder="Search spaces..." value={filters.search || ''} onChange={(e) => updateFilters({ search: e.target.value })} className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm" />
          </div>
        </div>
      </div>

      {/* Spaces Table */}
      <div className="bg-white rounded-lg border overflow-hidden">
        {loading ? (
          <div className="p-8 text-center">
            <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            <p className="mt-2 text-sm text-gray-600">Loading parking spaces...</p>
          </div>
        ) : spaces.length === 0 ? (
          <div className="p-8 text-center">
            <p className="text-gray-600">No parking spaces found</p>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Space</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Location</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">State</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Sensor</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Display</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                  <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {spaces.map((space) => (
                  <tr key={space.space_id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex flex-col">
                        <div className="text-sm font-medium text-gray-900">{space.space_name}</div>
                        {space.space_code && <div className="text-xs text-gray-500">{space.space_code}</div>}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">
                        {[space.building, space.floor, space.zone].filter(Boolean).join(' ‚Ä¢ ') || '-'}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getStateBadgeColor(space.current_state)}`}>
                        {space.current_state || 'unknown'}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-xs font-mono text-gray-500">
                      {space.occupancy_sensor_deveui ? `...${space.occupancy_sensor_deveui.slice(-6)}` : '-'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-xs font-mono text-gray-500">
                      {space.display_device_deveui ? `...${space.display_device_deveui.slice(-6)}` : '-'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center space-x-2">
                        {space.enabled ? <span className="text-green-600">‚óè</span> : <span className="text-gray-400">‚óè</span>}
                        {space.maintenance_mode && <span className="text-xs bg-orange-100 text-orange-800 px-2 py-1 rounded">Maintenance</span>}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm">
                      <button onClick={() => handleEdit(space)} className="text-blue-600 hover:text-blue-900 mr-3">Edit</button>
                      <button onClick={() => handleArchive(space)} className="text-red-600 hover:text-red-900">Archive</button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Modal */}
      <SpaceFormModal isOpen={showModal} onClose={() => setShowModal(false)} onSave={handleSave} space={editingSpace} />
    </div>
  );
};

export default ParkingSpaces;
