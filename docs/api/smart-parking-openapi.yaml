
openapi: 3.1.0
info:
  title: Smart Parking Platform API
  version: 5.3.0-impl-sync
  summary: Implementation-synced OpenAPI (implicit tenant scoping)
  description: |
    This specification reflects the **current implementation** of v5.3 using **implicit tenant scoping**.
    Tenant is derived from the authenticated user (JWT) or API key; paths do **not** include `/tenants/{tenant_id}`.
servers:
  - url: https://api.verdegris.eu
    description: Production
security:
  - bearerAuth: []
  - apiKeyAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "User JWT access token (Authorization: Bearer <token>)"
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: "Tenant-scoped API key"
  parameters:
    SiteId: { name: site_id, in: path, required: true, schema: { type: string, format: uuid } }
    SpaceId: { name: space_id, in: path, required: true, schema: { type: string, format: uuid } }
    ReservationId: { name: reservation_id, in: path, required: true, schema: { type: string, format: uuid } }
    DeviceEui: { name: deveui, in: path, required: true, schema: { type: string, pattern: '^[0-9A-Fa-f]{16}$' } }
    DeviceEuiRaw: { name: device_eui, in: path, required: true, schema: { type: string, pattern: '^[0-9A-Fa-f]{16}$' } }
    PolicyId: { name: policy_id, in: path, required: true, schema: { type: string, format: uuid } }
    ApiKeyId: { name: key_id, in: path, required: true, schema: { type: string, format: uuid } }
    GatewayEui: { name: gw_eui, in: path, required: true, schema: { type: string } }
    Limit: { name: limit, in: query, schema: { type: integer, minimum: 1, maximum: 1000, default: 100 } }
    Offset: { name: offset, in: query, schema: { type: integer, minimum: 0, default: 0 } }
    Cursor: { name: cursor, in: query, schema: { type: string } }
    Sort: { name: sort, in: query, schema: { type: string, description: "Comma separated fields, prefix with - for desc" } }
  responses:
    Problem:
      description: Problem Details
      content:
        application/problem+json:
          schema: { $ref: '#/components/schemas/Problem' }
  schemas:
    Problem:
      type: object
      required: [type, title, status]
      properties:
        type: { type: string, format: uri }
        title: { type: string }
        status: { type: integer }
        detail: { type: string }
        instance: { type: string }
        request_id: { type: string }
    Pagination:
      type: object
      properties:
        total: { type: integer }
        limit: { type: integer }
        offset: { type: integer }
        has_more: { type: boolean }
        next_cursor: { type: string, nullable: true }
    User:
      type: object
      properties:
        id: { type: string, format: uuid }
        email: { type: string, format: email }
        name: { type: string }
        role: { type: string, enum: [owner, admin, operator, viewer] }
    Tenant:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        slug: { type: string }
        is_active: { type: boolean }
        created_at: { type: string, format: date-time }
        settings: { type: object, additionalProperties: true }
    Site:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        timezone: { type: string }
        metadata: { type: object, additionalProperties: true }
        created_at: { type: string, format: date-time }
    Space:
      type: object
      properties:
        id: { type: string, format: uuid }
        site_id: { type: string, format: uuid }
        code: { type: string }
        name: { type: string }
        floor: { type: string, nullable: true }
        zone: { type: string, nullable: true }
        state: { type: string, enum: [free, occupied, reserved, maintenance] }
        sensor_eui: { type: string, pattern: '^[0-9A-Fa-f]{16}$', nullable: true }
        display_eui: { type: string, pattern: '^[0-9A-Fa-f]{16}$', nullable: true }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    Reservation:
      type: object
      properties:
        id: { type: string, format: uuid }
        space_id: { type: string, format: uuid }
        reserved_from: { type: string, format: date-time }
        reserved_until: { type: string, format: date-time }
        status: { type: string, enum: [pending, confirmed, expired, cancelled] }
        user_email: { type: string, format: email, nullable: true }
        user_phone: { type: string, nullable: true }
        request_id: { type: string, nullable: true }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    Device:
      type: object
      properties:
        id: { type: string, format: uuid }
        dev_eui: { type: string, pattern: '^[0-9A-Fa-f]{16}$' }
        device_type: { type: string, enum: [sensor, display] }
        device_model: { type: string, nullable: true }
        status: { type: string, enum: [orphan, active, inactive, decommissioned] }
        last_seen_at: { type: string, format: date-time, nullable: true }
    DeviceType:
      type: object
      properties:
        type_code: { type: string }
        category: { type: string, enum: [sensor, display] }
        name: { type: string }
        manufacturer: { type: string, nullable: true }
    DisplayPolicy:
      type: object
      properties:
        id: { type: string, format: uuid }
        policy_name: { type: string }
        is_active: { type: boolean }
        display_codes: { type: object, additionalProperties: true }
        created_at: { type: string, format: date-time }
        activated_at: { type: string, format: date-time, nullable: true }
    ApiKey:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        scopes: { type: array, items: { type: string } }
        created_at: { type: string, format: date-time }
        expires_at: { type: string, format: date-time, nullable: true }
        last_used_at: { type: string, format: date-time, nullable: true }
    WebhookSecret:
      type: object
      properties:
        id: { type: string, format: uuid }
        created_at: { type: string, format: date-time }
        is_active: { type: boolean }
    Gateway:
      type: object
      properties:
        gw_eui: { type: string }
        name: { type: string, nullable: true }
        last_seen_at: { type: string, format: date-time, nullable: true }
    GatewaySummary:
      type: object
      properties:
        total: { type: integer }
        active: { type: integer }
        last_24h_rx: { type: integer }
paths:
  /health:
    get:
      summary: Liveness ping
      security: []
      responses: { '200': { description: OK } }
  /health/ready:
    get:
      summary: Readiness (internal)
      security: [ { apiKeyAuth: [] } ]
      responses:
        '200': { description: Ready }
        '503': { description: Unready }
  /health/live:
    get:
      summary: Liveness (K8s)
      security: []
      responses: { '200': { description: Alive }, '503': { description: Not Alive } }
  /metrics:
    get:
      summary: Prometheus metrics (internal)
      security: [ { apiKeyAuth: [] } ]
      responses: { '200': { description: OpenMetrics text, content: { text/plain: { schema: { type: string } } } } }

  /api/v1/auth/login:
    post:
      summary: Login with email + password
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: { type: string }
                  token_type: { type: string }
                  expires_in: { type: integer }
                  refresh_token: { type: string, nullable: true }
                  user: { $ref: '#/components/schemas/User' }
        '401': { $ref: '#/components/responses/Problem' }
  /api/v1/auth/register:
    post:
      summary: Register tenant + owner; returns JWT
      security: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  tenant: { $ref: '#/components/schemas/Tenant' }
                  user: { $ref: '#/components/schemas/User' }
                  access_token: { type: string }
                  token_type: { type: string }
                  expires_in: { type: integer }

  /api/v1/tenants/current:
    get:
      summary: Current tenant
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Tenant' } } } }
    patch:
      summary: Update current tenant
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/Tenant' } } } }

  /api/v1/sites:
    get:
      summary: List sites
      parameters: [ { $ref: '#/components/parameters/Limit' }, { $ref: '#/components/parameters/Offset' }, { $ref: '#/components/parameters/Sort' } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - type: object
                    properties:
                      items: { type: array, items: { $ref: '#/components/schemas/Site' } }
    post:
      summary: Create site
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Site' } } } }

  /api/v1/sites/{site_id}:
    get:
      summary: Get site
      parameters: [ { $ref: '#/components/parameters/SiteId' } ]
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Site' } } } }
    patch:
      summary: Update site
      parameters: [ { $ref: '#/components/parameters/SiteId' } ]
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/Site' } } } }

  /api/v1/users:
    get:
      summary: List users in current tenant
      parameters: [ { $ref: '#/components/parameters/Limit' }, { $ref: '#/components/parameters/Offset' }, { $ref: '#/components/parameters/Sort' } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - type: object
                    properties:
                      items: { type: array, items: { $ref: '#/components/schemas/User' } }

  /api/v1/spaces:
    get:
      summary: List spaces (tenant-scoped)
      parameters: [ { $ref: '#/components/parameters/Limit' }, { $ref: '#/components/parameters/Offset' }, { $ref: '#/components/parameters/Cursor' }, { $ref: '#/components/parameters/Sort' } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - type: object
                    properties:
                      items: { type: array, items: { $ref: '#/components/schemas/Space' } }

  /api/v1/spaces/{space_id}:
    get:
      summary: Get space
      parameters: [ { $ref: '#/components/parameters/SpaceId' } ]
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Space' } } } }
        '404': { $ref: '#/components/responses/Problem' }
    patch:
      summary: Update space (partial)
      parameters: [ { $ref: '#/components/parameters/SpaceId' } ]
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/Space' } } } }
    delete:
      summary: Soft delete space
      parameters: [ { $ref: '#/components/parameters/SpaceId' } ]
      responses: { '204': { description: Deleted }, '409': { $ref: '#/components/responses/Problem' } }

  /api/v1/spaces/stats/summary:
    get:
      summary: Space statistics summary
      responses: { '200': { description: OK } }

  /api/v1/reservations:
    get:
      summary: List reservations (tenant-scoped)
      parameters: [ { $ref: '#/components/parameters/Limit' }, { $ref: '#/components/parameters/Offset' }, { $ref: '#/components/parameters/Cursor' }, { $ref: '#/components/parameters/Sort' } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - type: object
                    properties:
                      items: { type: array, items: { $ref: '#/components/schemas/Reservation' } }
    post:
      summary: Create reservation (idempotent)
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Reservation' } } } }
        '200': { description: Idempotent replay, content: { application/json: { schema: { $ref: '#/components/schemas/Reservation' } } } }
        '409': { $ref: '#/components/responses/Problem' }

  /api/v1/reservations/{reservation_id}:
    get:
      summary: Get reservation
      parameters: [ { $ref: '#/components/parameters/ReservationId' } ]
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Reservation' } } } }
    delete:
      summary: Cancel reservation
      parameters: [ { $ref: '#/components/parameters/ReservationId' } ]
      responses:
        '200': { description: Cancelled }

  /api/v1/devices:
    get:
      summary: List devices
      parameters: [ { $ref: '#/components/parameters/Limit' }, { $ref: '#/components/parameters/Offset' }, { $ref: '#/components/parameters/Cursor' }, { $ref: '#/components/parameters/Sort' } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/Pagination'
                  - type: object
                    properties:
                      items: { type: array, items: { $ref: '#/components/schemas/Device' } }

  /api/v1/devices/device-types:
    get:
      summary: List device types
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/DeviceType' }

  /api/v1/devices/{deveui}:
    get:
      summary: Get device by DevEUI
      parameters: [ { $ref: '#/components/parameters/DeviceEui' } ]
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Device' } } } }
        '404': { $ref: '#/components/responses/Problem' }
    put:
      summary: Update device
      parameters: [ { $ref: '#/components/parameters/DeviceEui' } ]
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/Device' } } } }
  /api/v1/devices/{deveui}/archive:
    patch:
      summary: Archive device
      parameters: [ { $ref: '#/components/parameters/DeviceEui' } ]
      responses: { '200': { description: Archived } }

  /api/v1/devices/full-metadata:
    get:
      summary: Get all devices with metadata
      responses: { '200': { description: OK } }

  /api/v1/orphan-devices:
    get:
      summary: List orphan devices
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items: { type: array, items: { $ref: '#/components/schemas/Device' } }
  /api/v1/orphan-devices/{device_eui}/assign:
    post:
      summary: Assign orphan device to a space
      parameters: [ { $ref: '#/components/parameters/DeviceEuiRaw' } ]
      responses: { '200': { description: Assigned } }
  /api/v1/orphan-devices/{device_eui}:
    delete:
      summary: Delete orphan device
      parameters: [ { $ref: '#/components/parameters/DeviceEuiRaw' } ]
      responses: { '204': { description: Deleted } }

  /api/v1/display-policies:
    get:
      summary: List display policies
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/DisplayPolicy' }
                  active_policy_id: { type: string, format: uuid, nullable: true }
    post:
      summary: Create display policy
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/DisplayPolicy' } } } }

  /api/v1/display-policies/{policy_id}:
    get:
      summary: Get display policy
      parameters: [ { $ref: '#/components/parameters/PolicyId' } ]
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/DisplayPolicy' } } } }
    patch:
      summary: Update display policy
      parameters: [ { $ref: '#/components/parameters/PolicyId' } ]
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/DisplayPolicy' } } } }

  /api/v1/display-policies/admin-overrides:
    post:
      summary: Create admin override
      responses: { '201': { description: Created } }
  /api/v1/display-policies/admin-overrides/{override_id}:
    delete:
      summary: Delete admin override
      parameters:
        - name: override_id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses: { '204': { description: Deleted } }
  /api/v1/display-policies/spaces/{space_id}/computed-state:
    get:
      summary: Get computed display state for a space
      parameters: [ { $ref: '#/components/parameters/SpaceId' } ]
      responses: { '200': { description: OK } }

  /api/v1/downlinks/queue/metrics:
    get:
      summary: Downlink queue metrics
      responses: { '200': { description: OK } }
  /api/v1/downlinks/queue/health:
    get:
      summary: Downlink queue health
      responses: { '200': { description: Healthy }, '503': { description: Unhealthy } }
  /api/v1/downlinks/queue/clear-metrics:
    post:
      summary: Reset queue metrics
      responses: { '200': { description: Cleared } }

  /api/v1/api-keys:
    get:
      summary: List API keys
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items: { type: array, items: { $ref: '#/components/schemas/ApiKey' } }
    post:
      summary: Create API key
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/ApiKey' } } } }
  /api/v1/api-keys/{key_id}:
    delete:
      summary: Revoke API key
      parameters: [ { $ref: '#/components/parameters/ApiKeyId' } ]
      responses: { '200': { description: Revoked } }

  /api/v1/webhook-secret:
    post:
      summary: Create webhook secret
      responses: { '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/WebhookSecret' } } } } }
  /api/v1/webhook-secret/rotate:
    post:
      summary: Rotate webhook secret
      responses: { '200': { description: Rotated, content: { application/json: { schema: { $ref: '#/components/schemas/WebhookSecret' } } } } }

  /api/v1/gateways:
    get:
      summary: List gateways
      responses: { '200': { description: OK, content: { application/json: { schema: { type: object, properties: { items: { type: array, items: { $ref: '#/components/schemas/Gateway' } } } } } } } }
  /api/v1/gateways/{gw_eui}:
    get:
      summary: Get gateway
      parameters: [ { $ref: '#/components/parameters/GatewayEui' } ]
      responses: { '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Gateway' } } } } }
  /api/v1/gateways/stats/summary:
    get:
      summary: Gateway statistics summary
      responses: { '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/GatewaySummary' } } } } }

  /api/v1/uplink:
    post:
      summary: ChirpStack uplink webhook (HMAC)
      security: []
      parameters:
        - name: X-Chirpstack-Signature
          in: header
          required: true
          schema: { type: string, description: "sha256=<hex>" }
      responses:
        '202': { description: Accepted }
        '401': { $ref: '#/components/responses/Problem' }
